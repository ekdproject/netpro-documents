/*! For license information please see main.370e7cc91a103239ce3f.hot-update.js.LICENSE.txt */
self.webpackHotUpdatecustom("main",{"./app/plugins/stl.js":(e,o,t)=>{const n=t("./app/node_modules/three/build/three.cjs"),{STLLoader:i}=t("./app/node_modules/three/examples/jsm/loaders/STLLoader.js"),{OrbitControls:r}=t("./app/node_modules/three/examples/jsm/controls/OrbitControls.js"),{GUI:a}=t("./app/node_modules/dat.gui/build/dat.gui.module.js");e.exports={stlLoader:e=>{fetch(e).then((e=>e.arrayBuffer())).then((e=>{!async function(e){var o,t,a,d,s,l,p,w,m,c,h=parseFloat("1.05"),u=parseFloat("200"),x=parseFloat("1.75"),F=parseFloat("150");(o=document.querySelector("#content-dialog")).innerHTML="",(t=new n.PerspectiveCamera(37.8,window.innerWidth/window.innerHeight,1,1e5)).position.z=300,t.position.y=-500,t.position.x=-500,t.up=new n.Vector3(0,0,1),(a=new n.Scene).background=new n.Color(3158064),new FileReader;var v=(new i).parse(e);v.computeVertexNormals(),v.center(),console.log(v);var f=new n.MeshPhongMaterial({color:16777215});(p=new n.Mesh(v,f)).traverse((function(e){if(e instanceof n.Mesh)for(var o=e.geometry.getAttribute("position").array,t=0;t<o.length;t+=9){var i={};i.x=o[t+0],i.y=o[t+1],i.z=o[t+2];var r={};r.x=o[t+3],r.y=o[t+4],r.z=o[t+5];var a={};a.x=o[t+6],a.y=o[t+7],a.z=o[t+8]}}));var g=(new n.Box3).setFromObject(p);w=g.max.z-g.min.z,m=g.max.x-g.min.x,c=g.max.y-g.min.y,(w/10).toFixed(2),(m/10).toFixed(2),(c/10).toFixed(2);var y=0,M=(y=y.toFixed(2))*h;M=M.toFixed(2);var z=parseFloat(2*(0/(x/2)^2/Math.PI)/10).toFixed(2);z=parseFloat(z).toFixed(0);var L=Math.floor(z/F/60);L=parseFloat(L).toFixed(0);var b=z/F%60;0==(b=parseFloat(b).toFixed(0))&&(b=1);var j,H=M*u/1e3;H=parseFloat(H).toFixed(2),j=w>m&&w>c?2*w:m>w&&m>c?2*m:c>w&&c>m?2*c:4*c,t.position.set(0,-j,0);var S=j+200,P=j+200,C=Math.floor(S/10),W=Math.floor(P/10),_=new n.Mesh(new n.PlaneGeometry(S,P,C,W),new n.MeshPhongMaterial({emissive:7368816,color:0,wireframe:!0,wireframeLinewidth:1}));_.receiveShadow=!0,_.position.z=g.min.z-.1,a.add(_),a.add(p),(l=new n.HemisphereLight(15263976,0,1)).position.set(0,0,0),a.add(l);const E=new n.DirectionalLight(15263976,.5);a.add(E),(d=new n.WebGLRenderer({antialias:!1})).setSize(window.innerWidth,window.innerHeight),(s=new r(t,d.domElement)).update(),o.appendChild(d.domElement),d.render(a,t);const G=()=>{requestAnimationFrame(G),O()};function O(){s.update(),l.position.copy(t.position),d.render(a,t)}G(),window.addEventListener("resize",(function(){t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),d.setSize(window.innerWidth,window.innerHeight),O()}),!1)}(e)}))}}}},(function(e){e.h=()=>"0d689dd590e80c4562d4"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,